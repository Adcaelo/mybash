# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"



# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -la --color=auto'
alias la="ls -latrh"
alias l='ls -CF'
alias ltime="ls -latrh --full-time"
alias tnf="tail -n100 -f"
alias sls="screen -ls"



# pour la colorisation et l'affichage de la branche en cours
#parse_git_branch() {
#    #git status | grep "rien à valider" > /dev/null 2>&1;
#    #if [ "$?" -eq "0" ]; then
#    #    # @4 - Clean repository - nothing to commit
#    #    echo "'$Green'"$(__git_ps1 " (%s)");
#    #else
#    #    # @5 - Changes to working tree
#    #    echo "'$IRed'"$(__git_ps1 " {%s}");
#    #fi
#
#    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git::\1)/'
#}

# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=`parse_git_dirty`
        echo "[${BRANCH}${STAT}]"
    else
        echo ""
    fi
}

# get current status of git repo
function parse_git_dirty {
    status=`git status 2>&1 | tee`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modifié" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Fichiers non suivis" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Votre branche est en avance" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "nouveau fichier" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renommé" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "supprimé" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

function push_what {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        echo 'git diff --stat --cached origin/'${BRANCH}
        git diff --stat --cached origin/${BRANCH}
    fi
}

alias gitmerged='git branch --merged'
alias gitnomerged='git branch --no-merged'

function gitdeletetag {
    git tag -d $1
    git push origin :refs/tags/$1
}

alias fap="git fetch -p && git pull"

alias rrr='git fetch -p && git rebase -i remotes/origin/master'

alias donotcommit='git update-index --assume-unchanged'
alias recommit='git update-index --no-assume-unchanged'

alias bigfiles='find . -type f -printf "%s\t%p\n" | sort -n | tail -6'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

alias snapupdate="sudo snap refresh"

alias vi="vim"
alias brc="vim ~/mybash/bashrc_projet"

#function dush {
#    echo "du -sk * | sort -n | awk '{print \$2}' | xargs -ia du -hs \"a\""
#    du -sk * | sort -n | awk '{print $2}' | xargs -ia du -hs "a"
#}

alias dush="du -sh * | sort -h"

function agrep {
    alias | grep $1
}

alias dockerstopall="docker stop $(docker ps -a -q)"
alias dockercleanup="docker system prune --force --all"

function resetBranch {
    cd ~/src/platform/
    git fetch -p
    git reset --hard origin/HEAD
}

function gitCleanup {
    curBranch=$(git rev-parse --abbrev-ref HEAD)

    read -p "Supprimer toutes les branches sauf la branche actuelle : $curBranch [Y]es / [n]o ? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git branch | grep -v "$curBranch" | xargs git branch -D
    fi

}

function gsb {
    curBranch=$(git rev-parse --abbrev-ref HEAD)

    git checkout mep/next && git pull && git branch -D $curBranch

    if [ $# -eq 1 ]
    then
        git branch -D $1
        git checkout $1

        read -p "Rebase ? $1 [Y]es / [n]o ? " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            git rebase -i mep/next
        fi
    fi

    read -p "Rebuild ? $1 [Y]es / [n]o ? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        php artisan optimize && composer install && pnpm i && pnpm build
    fi
}

function gitNow {
    read -p "Modifier la date et l'heure du dernier commit [Y]es / [n]o ? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo 'git commit --amend --no-edit --date "$(date)"'
        git commit --amend --no-edit --date "$(date)"
    fi
}
